# -*- coding: utf-8 -*-
"""weather.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yLIym6IkuPp-qaTrOzGCR-zQov3qq3Do
"""

# API 호출
from urllib.request import Request, urlopen
from urllib.parse import urlencode, quote_plus
import xml.etree.ElementTree as ET

import datetime as dt

def make_file_name(dataCd, dateCd, startDt, startHh, endDt, endHh, stnIds):
    return f'SURFACE_{dataCd}_{stnIds}_{dateCd}_{startDt}_{endDt}.csv'

def get_weather_data(arg_dict):
    url = 'http://apis.data.go.kr/1360000/AsosHourlyInfoService/getWthrDataList'
    ServiceKey = ##############################################################
    queryParams = '?' + urlencode({ 
                                   quote_plus('ServiceKey') : ServiceKey, 
                                   quote_plus('pageNo') : arg_dict['_pageNo'], 
                                   quote_plus('numOfRows') : arg_dict['_numOfRows'], 
                                   quote_plus('dataType') : arg_dict['_dataType'], 
                                   quote_plus('dataCd') : arg_dict['_dataCd'], 
                                   quote_plus('dateCd') : arg_dict['_dateCd'], 
                                   quote_plus('startDt') : arg_dict['_startDt'], 
                                   quote_plus('startHh') : arg_dict['_startHh'], 
                                   quote_plus('endDt') : arg_dict['_endDt'], 
                                   quote_plus('endHh') : arg_dict['_endHh'], 
                                   quote_plus('stnIds') : arg_dict['_stnIds'] 
                                  })
    request = Request(url + queryParams)
    request.get_method = lambda: 'GET'
    response_body = urlopen(request).read()
    return response_body

item_tag = \
[ 
  'tm', 'rnum', 'stnId', 'stnNm', 'ta', 'taQcflg', 'rn', 'rnQcflg', 'ws', 'wsQcflg', 'wd', 
  'wdQcflg', 'hm', 'hmQcflg', 'pv', 'td', 'pa', 'paQcflg', 'ps', 'psQcflg', 'ss', 'ssQcflg', 
  'icsr', 'dsnw', 'hr3Fhsc', 'dc10Tca', 'dc10LmcsCa', 'clfmAbbrCd', 'lcsCh', 'vs', 'gndSttCd', 
  'dmstMtphNo', 'ts', 'tsQcflg', 'm005Te', 'm01Te', 'm02Te', 'm03Te'
]

def get_weather_csv(filename, xtree):
    global item_tag
    f = open(filename, 'w', encoding='CP949')
    for tag in item_tag:
        f.write('{},'.format(tag))
    f.write('\n')
    for tag in xtree:
        if(tag.tag == 'header'):
            header_tag = tag
            for tag in header_tag:
                print(tag.text)
        if(tag.tag == 'body'):
            body_tag = tag
            for tag in body_tag:
                if(tag.tag == 'items'):
                    items_tag = tag
                    for tag in items_tag:
                        item = tag
                        for tag in item:
                            f.write('{}, '.format(tag.text))
                        f.write('\n')
    f.close()

# String to Dateime function

def _strptime(arg_dict, key, _format='%Y%m%d'):
    time = dt.datetime.strptime(arg_dict[key], _format)
    return time

def _strftime(newtime, _format='%Y%m%d'):
    return dt.datetime.strftime(newtime, _format)

def add_hours(s, hours):
    s += dt.timedelta(hours=hours)
    return s

def to_hours(s, e):
    return (e-s).total_seconds() / 3600

def change_args(dictionary, args, value):
    dictionary[args] = value
    return dictionary

def new_startDt():
    dt_startDt = _strptime(weather_args['_startDt'])
    new_startDt = add_hours(dt_startDt, 1000)
    str_new_startDt = _strftime(new_startDt)
    return str_new_startDt